h3. Current goals

* -Sending packets.-
* -Set <code>main</code> to increment tos.-
* -Sending forth word.-
* -Sending numbers.-
* -Sending quotes.-
* -Storing forth word.-
* -VM words.-
* -VM numbers.-
* -VM quotes.-
* -Send execute word.-
* -kick instuction.-
* -VM save.-
* -VM load.-
* -Plaintext vm save/load.-
* -Document plaintext load.-
* -Dynamic kick from .so.-
* -Move udp to kick.so.-
* -No polling.-
* -Quoting words.-
* -Keyboard input.-
* -Alphasorted image.-
* -Fix stub for `word' to push correct address.-
* -Compiler.-
* -Conditional.-
* Buy a shovel.
* -Data words.-
* -Runtime-only data words.-
* -Conditional brackets.-
* -Nested conditionals.-
* -Reverse characters order in word to be TYPE D R O W.-
* Editor.
** Basic linear editor.
*** -Read word.-
*** -Display word typed.-
*** -Display word definition.-
*** -Separate display from input.-
*** -Replace word under cursor when typing.-
*** -Operators parsing.-
*** -Make compilation working.-
*** -{} put offset only, rest is compiled via inlines.-
*** Save.
* JS interpreter.

h3. Memory

There is a dictionary @dict@ defined in common.c. It holds 512 pointers.

Each pointer is a memory block starting with 8-byte header. First two bytes are
length of memory block minus header, next two bytes are type of word, third two
bytes are index of atom. Last two bytes are unused.

Rest of memory block is depended on word type. For ordinary word it is an array of
atom indices. For dictionary it is a 512 pointers. For inline and data words it is
an array of bytes.

Dictionary @dict@ contains pointer to itself with @core@ atom.

h3. Saving

First we dump atoms - letter 'A' and 16 bytes for atom name.

Then we dump dictionary. For each word in dictionary dump letter 'W' and memory block for this word.

For words we simply dump memory block + dictionary atom it in.

h3. Loading

Letter 'A' commands to load atom. Letter 'W' commands to load word. Letter 'F' marks end of image.
Letter 'D' marks dictionary. Letter '.' marks end of dictionary.

h3. Quick Reference

Consecutive lower case letters (a-z) describe word, digits and uppercase describe hex number (0-9A-F).
Colon is a special character, it must immediatelly follow word and means that following is a definition
of this word. Single colon defines ordinary word, two colons define inline code word, three colons
define data word, four colons define code word. Other characters (+-., etc) describe single character
word. Spaces are ignored (except of before colon).

h3. History

What we have to save: words and numbers. So we save

h3. Editor (new)

Actions:

* Create word (on colon).
* Cycle type (on consecuent colons).
* Append to definition (on lexical boundary).

Input:

* *L*etters [a-z].
* *N*umbers [0-9A-F].
* *O*perators !"#$%&\'()*+,-./;<=>?@[\\]^_`{|}~
* *S*pecial [:]
* *W*hitespace [ \t\r\n]

On transitions:

1. LN LO LW NL NO NW OL ON OO OW - append buffer to current word.
2. LS - create word from buffer and set it to current.
3. LL - push current letter into buffer.
4. NN - push current number into buffer.
5. NS OS WS - syntax error.
6. SS - cycle type of current word.
7. WW WL WN WO SL SN SO SW - do nothing.

On key:

* W: (1:LW NW OW)        (7:WW SW)
	WS -> (7)
	-> (1)
* L: (1:NL OL)    (3:LL) (7:WL SL)
	L -> (3)
	WS -> (7)
	-> (1,3)
* N: (1:LN ON)    (4:NN) (7:WN SN)
	N -> (4)
	WS -> (7)
	-> (1,4)
	
* O: (1:LO NO OO)        (7:WO SO)
	WS -> (7)
	-> (1)
	
* S: (2:LS)       (6:SS) (5:NS OS WS)
	L -> (2)
	S -> (6)
	-> (5)

h3. Editor (small)

Two states - word selection and word editing. Both operates on words.

On space in selection mode editor goes to edit mode. In editor mode it replaces word under cursor and goes right.

On letter key in both modes letter is pushed into word.

On question mark in selection mode word definition displayed. In editor mode word definition displayed or if no word
conditional is written.

Return key - in both modes everything is reset.

h3. Editor

Hitting a key puts it in the word buffer. Hitting space applies word and
prints its definition.

Typing word name followed by return executes the word.

Typing word name followed by other words inserts them to a definition. By default words
are inserted at the beginning. Slashe at the end of word change place of insertion to
after next such word. Multiple @/@ select Nth next word.

Dash after slashes wipe word selected and more dashes wipe words after that.
Insertion will be done after wiped words. Lone slash sets insertion to the end of definition.

- @foo bar baz@ - word @foo@ is @bar baz ...@ now.
- @foo bar///---baz bar/baz@ - delete third @bar@ in @foo@, two words after it and put @baz@ on their
place; find next @bar@ and put @baz@ after it. 
- @foo/bar baz@ - word @foo@ is @... bar baz@ now.

